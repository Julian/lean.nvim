local infoview = require('lean.infoview')
local fixtures = require('tests.fixtures')
local helpers = require('tests.helpers')

helpers.setup{}
describe('infoview', function()
  describe('initial', function()
    it('opens',
    function(_)
      helpers.edit_lean_buffer(fixtures.lean3_project.some_existing_file)
      assert.initclosed.infoview()
      infoview.get_current_infoview():open()
      assert.opened.infoview()
    end)

    it('remains open on BufEnter',
    function(_)
      vim.api.nvim_command("edit " .. fixtures.lean3_project.some_existing_file)
      assert.opened_kept.infoview()
    end)

    it('remains open on WinEnter',
    function(_)
      vim.api.nvim_command("split")
      helpers.edit_lean_buffer(fixtures.lean3_project.some_nested_existing_file)
      assert.buf.created.tracked()
      assert.win.created.tracked()
      assert.opened_kept.infoview()
      vim.api.nvim_command("close")
      assert.win.removed.tracked()
      assert.buf.left.tracked()
      assert.opened_kept.infoview()
    end)

    it('closes',
    function(_)
      helpers.edit_lean_buffer(fixtures.lean3_project.some_existing_file)
      assert.opened_kept.infoview()
      infoview.get_current_infoview():close()
      assert.closed.infoview()
    end)

    it('remains closed on BufEnter',
    function(_)
      vim.api.nvim_command("edit " .. fixtures.lean3_project.some_nested_existing_file)
      assert.buf.left.tracked()
      assert.closed_kept.infoview()
    end)

    it('remains closed on WinEnter',
    function(_)
      vim.api.nvim_command("split")
      helpers.edit_lean_buffer(fixtures.lean3_project.some_existing_file)
      assert.win.created.tracked()
      assert.buf.left.tracked()
      assert.closed_kept.infoview()
      vim.api.nvim_command("close")
      assert.win.removed.tracked()
      assert.buf.left.tracked()
      assert.closed_kept.infoview()
    end)

    it('manual quit succeeds and updates internal state',
    function(_)
      infoview.get_current_infoview():open()
      assert.opened.infoview()
      vim.api.nvim_command("wincmd l")
      assert.buf.left.tracked()
      assert.win.left.tracked()
      vim.api.nvim_command("quit")
      assert.buf.left.tracked_pending()
      assert.win.left.tracked_pending()
      assert.use_pendingbuf.use_pendingwin.closed.infoview()
    end)

    it('manual close succeeds and updates internal state',
    function(_)
      infoview.get_current_infoview():open()
      assert.opened.infoview()
      vim.api.nvim_command("wincmd l")
      assert.buf.left.tracked()
      assert.win.left.tracked()
      vim.api.nvim_command("close")
      assert.buf.left.tracked_pending()
      assert.win.left.tracked_pending()
      assert.use_pendingbuf.use_pendingwin.closed.infoview()
    end)
  end)

  describe('new tab', function()
    it('closes independently',
    function(_)
      infoview.get_current_infoview():open()
      assert.opened.infoview()
      vim.api.nvim_command("tabnew")
      assert.win.created.tracked()
      assert.buf.created.tracked()
      helpers.edit_lean_buffer(fixtures.lean_project.some_existing_file)
      assert.initclosed.infoview()
      infoview.get_current_infoview():open()
      assert.opened.infoview()
      infoview.get_current_infoview():close()
      assert.closed.infoview()
      vim.api.nvim_command("tabprevious")
      assert.buf.left.tracked()
      assert.win.left.tracked()
      assert.opened_kept.infoview()
    end)

    it('opens independently',
    function(_)
      infoview.get_current_infoview():close()
      assert.closed.infoview()
      vim.api.nvim_command("tabnext")
      assert.buf.left.tracked()
      assert.win.left.tracked()
      infoview.get_current_infoview():open()
      assert.opened.infoview()
      vim.api.nvim_command("tabprevious")
      assert.buf.left.tracked()
      assert.win.left.tracked()
      assert.closed_kept.infoview()
      vim.api.nvim_command("tabnext")
      assert.buf.left.tracked()
      assert.win.left.tracked()
      assert.opened_kept.infoview()
    end)

    it('closes when only window',
    function(_)
      vim.api.nvim_command("close")
      assert.buf.left.tracked()
      assert.win.removed.tracked()
      assert.opened_kept.infoview()
      local id = infoview.get_current_infoview().id
      infoview.get_current_infoview():close()
      assert.buf.left.tracked_pending()
      assert.win.left.tracked_pending()
      assert.use_pendingbuf.use_pendingwin.closed({id}).infoview()
    end)
  end)
end)
