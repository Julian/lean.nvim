 lean.nvim is a plugin providing Neovim support for the Lean interactive
 theorem prover, developed by Leonardo de Moura at Microsoft Research.

 To find out more, see https://github.com/Julian/lean.nvim.

                                                                     *lean.nvim*
lean.setup({opts})                                                  *lean.setup*
     Setup function to be run in your init.lua (or init.vim).

    Parameters: ~
        {opts}  (table:)  Configuration options


lean.use_suggested_mappings()                      *lean.use_suggested_mappings*



lean.current_search_paths()                          *lean.current_search_paths*
     Return the current Lean search path.

     Includes both the Lean core libraries as well as project-specific
     directories.


Pin                                                                        *Pin*


    Fields: ~
        {id}  (string)  @a label to identify the pin


Info                                                                      *Info*


    Fields: ~
        {pin}   (Pin)
        {pins}  (Pin[])


Infoview                                                              *Infoview*


    Fields: ~
        {info}    (Info)
        {window}  (integer)


infoview.enable_debug()                                  *infoview.enable_debug*
     Enables printing of extra debugging information in the infoview.


InfoviewNewArgs                                                *InfoviewNewArgs*


    Fields: ~
        {width}                (?)  integer
        {height}               (?)  integer
        {horizontal_position}  (?)  "top"|"bottom"
        {separate_tab}         (?)  bool


infoview.close_all()                                        *infoview.close_all*
     Close all open infoviews (across all tabs).


infoview.enable()                                              *infoview.enable*
     Enable and open the infoview across all Lean buffers.


infoview.make_buffer_focusable()                *infoview.make_buffer_focusable*
     Configure the infoview to update when this buffer is active.


infoview.set_autoopen()                                  *infoview.set_autoopen*
     Set whether a new infoview is automatically opened when entering Lean buffers.


infoview.set_autopause()                                *infoview.set_autopause*
     Set whether a new pin is automatically paused.


infoview.get_current_infoview()                  *infoview.get_current_infoview*
     Get the infoview corresponding to the current window.

    Returns: ~
        {Infoview}


infoview.open()                                                  *infoview.open*
     Open the current infoview (or ensure it is already open).


infoview.close()                                                *infoview.close*
     Close the current infoview (or ensure it is already closed).


infoview.toggle()                                              *infoview.toggle*
     Toggle whether the current infoview is opened or closed.


infoview.pin_toggle_pause()                          *infoview.pin_toggle_pause*
     Toggle whether the current pin receives updates.


infoview.add_pin()                                            *infoview.add_pin*
     Add a pin to the current cursor location.


infoview.set_diff_pin()                                  *infoview.set_diff_pin*
     Set the location for a diff pin to the current cursor location.


infoview.clear_pins()                                      *infoview.clear_pins*
     Clear any pins in the current infoview.


infoview.clear_diff_pin()                              *infoview.clear_diff_pin*
     Clear a diff pin in the current infoview.


infoview.toggle_auto_diff_pin()                  *infoview.toggle_auto_diff_pin*
     Toggle whether "auto-diff" mode is active for the current infoview.


infoview.enable_widgets()                              *infoview.enable_widgets*
     Enable widgets in the current infoview.


infoview.disable_widgets()                            *infoview.disable_widgets*
     Disable widgets in the current infoview.


infoview.go_to()                                                *infoview.go_to*
     Move the cursor to the infoview window.


infoview.reposition()                                      *infoview.reposition*
     Move the current infoview to the appropriate spot based on the
     current screen dimensions.
     Does nothing if there are more than 2 open windows.


 Support for abbreviations (unicode character replacement).

                                                            *lean.abbreviations*
abbreviations.load()                                        *abbreviations.load*
     Load the Lean abbreviations as a Lua table.


abbreviations.reverse_lookup()                    *abbreviations.reverse_lookup*
     Retrieve the table of abbreviations that would produce the given symbol.


abbreviations.show_reverse_lookup()          *abbreviations.show_reverse_lookup*
     Show a preview window with the reverse-lookup of the current character.


abbreviations.convert()                                  *abbreviations.convert*



abbreviations.enable()                                    *abbreviations.enable*



sorry.fill()                                                        *sorry.fill*
     Fill the current cursor position with `sorry`s to discharge all goals.

     I.e., given 3 current goals, with 2 in front of the cursor, will insert:
          { foo },<cursor>
          { sorry },
          { sorry },


 Support for `:checkhealth` for lean.nvim.

health.check()                                                    *health.check*
     Check whether lean.nvim is healthy.

     Call me via `:checkhealth lean`.


vim:tw=78:ts=8:noet:ft=help:norl:
