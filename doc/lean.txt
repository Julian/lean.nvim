==============================================================================
Table of Contents                                                *lean.contents*

Introduction ······················································ |lean.intro|
Commands ······················································· |lean.commands|
The Infoview ··················································· |lean.infoview|
(Unicode) Abbreviation Expansion ·································· |lean.intro|
Loogle ··························································· |lean.loogle|
satellite.nvim integration ···································· |lean.satellite|
LSP ································································· |lean.lsp|
Standard error buffers ··········································· |lean.stderr|
Client-side sorrying ·············································· |lean.sorry|

==============================================================================
Introduction                                                        *lean.intro*

 lean.nvim provides first-class Neovim support for the Lean interactive
 theorem prover, developed by Leonardo de Moura and the Lean FRO.

 To find out more, see https://github.com/Julian/lean.nvim.

                                                                     *lean.nvim*
lean.setup()                                                        *lean.setup*


lean.use_suggested_mappings({bufnr?})              *lean.use_suggested_mappings*
    Enable mappings for a given buffer

    Parameters: ~
        {bufnr?}  (number)  the bufnr to enable mappings in, defaulting to 0


lean.current_search_paths()                          *lean.current_search_paths*
     Return the current Lean search path.

     Includes both the Lean core libraries as well as project-specific
     directories.


==============================================================================
Commands                                                         *lean.commands*

 (Neovim) commands added by lean.nvim for interacting with Lean.

commands.show_goal()                                        *commands.show_goal*


commands.show_term_goal()                              *commands.show_term_goal*


commands.show_line_diagnostics()                *commands.show_line_diagnostics*


commands.enable()                                              *commands.enable*


==============================================================================
The Infoview                                                     *lean.infoview*

 Infoview-specific interaction for customizing or controlling the display of
 Lean's interactive goal state.

Pin                                                                        *Pin*
     An individual pin.

    Fields: ~
        {id}  (string)  @a label to identify the pin


Info                                                                      *Info*
     An individual info.

    Fields: ~
        {pin}   (Pin)
        {pins}  (Pin[])


Infoview                                                              *Infoview*
     A "view" on an info (i.e. window).

    Fields: ~
        {info}    (Info)
        {window}  (integer)


infoview.enable_debug()                                  *infoview.enable_debug*
     Enables printing of extra debugging information in the infoview.


InfoviewNewArgs                                                *InfoviewNewArgs*

    Fields: ~
        {width?}                (integer)
        {height?}               (integer)
        {horizontal_position?}  ()


infoview.close_all()                                        *infoview.close_all*
     Close all open infoviews (across all tabs).


infoview.__update_pin_by_uri({uri})               *infoview.__update_pin_by_uri*
     Update pins corresponding to the given URI.

    Parameters: ~
        {uri}  (string)


infoview.__update_pin_positions()              *infoview.__update_pin_positions*
     on_lines callback to update pins position according to the given textDocument/didChange parameters.


infoview.enable()                                              *infoview.enable*
     Enable and open the infoview across all Lean buffers.


infoview.set_autoopen()                                  *infoview.set_autoopen*
     Set whether a new infoview is automatically opened when entering Lean buffers.


infoview.set_autopause()                                *infoview.set_autopause*
     Set whether a new pin is automatically paused.


infoview.get_current_infoview()                  *infoview.get_current_infoview*
     Get the infoview corresponding to the current window.

    Returns: ~
        (Infoview)


infoview.open()                                                  *infoview.open*
     Open the current infoview (or ensure it is already open).


infoview.close()                                                *infoview.close*
     Close the current infoview (or ensure it is already closed).


infoview.toggle()                                              *infoview.toggle*
     Toggle whether the current infoview is opened or closed.


infoview.pin_toggle_pause()                          *infoview.pin_toggle_pause*
     Toggle whether the current pin receives updates.


infoview.add_pin()                                            *infoview.add_pin*
     Add a pin to the current cursor location.


infoview.set_diff_pin()                                  *infoview.set_diff_pin*
     Set the location for a diff pin to the current cursor location.


infoview.clear_pins()                                      *infoview.clear_pins*
     Clear any pins in the current infoview.


infoview.clear_diff_pin()                              *infoview.clear_diff_pin*
     Clear a diff pin in the current infoview.


infoview.toggle_auto_diff_pin()                  *infoview.toggle_auto_diff_pin*
     Toggle whether "auto-diff" mode is active for the current infoview.


infoview.enable_widgets()                              *infoview.enable_widgets*
     Enable widgets in the current infoview.


infoview.disable_widgets()                            *infoview.disable_widgets*
     Disable widgets in the current infoview.


infoview.go_to()                                                *infoview.go_to*
     Move the cursor to the infoview window.


infoview.reposition()                                      *infoview.reposition*
     Move the current infoview to the appropriate spot based on the
     current screen dimensions.
     Does nothing if there are more than 2 open windows.


==============================================================================
Table of Contents                                           *lean.abbreviations*

Introduction ······················································ |lean.intro|
Commands ······················································· |lean.commands|
The Infoview ··················································· |lean.infoview|
(Unicode) Abbreviation Expansion ·································· |lean.intro|
Loogle ··························································· |lean.loogle|
satellite.nvim integration ···································· |lean.satellite|
LSP ································································· |lean.lsp|
Standard error buffers ··········································· |lean.stderr|
Client-side sorrying ·············································· |lean.sorry|

==============================================================================
(Unicode) Abbreviation Expansion                                    *lean.intro*

 Support for abbreviations (unicode character replacement).

                                                            *lean.abbreviations*
abbreviations.load()                                        *abbreviations.load*
     Load the Lean abbreviations as a Lua table.


abbreviations.reverse_lookup()                    *abbreviations.reverse_lookup*


abbreviations.show_reverse_lookup()          *abbreviations.show_reverse_lookup*
     Show a preview window with the reverse-lookup of the current character.


abbreviations.convert()                                  *abbreviations.convert*


abbreviations.enable()                                    *abbreviations.enable*


==============================================================================
Loogle                                                             *lean.loogle*

 Support for interacting with the Loogle search engine.

LoogleResult                                                      *LoogleResult*

    Fields: ~
        {name}    (string)
        {type}    (string)
        {module}  (string)
        {doc}     (string)


loogle.search({type})                                            *loogle.search*
    Search Loogle for the given type.

    Parameters: ~
        {type}  (string)  The type pattern to look for.
                          @return LoogleResult[]? results Loogle hits in the JSON API format
                          @return string? err An error message from Loogle, in which case no results are returned


loogle.template({result})                                      *loogle.template*
    Create a minimal Lean file out of the given result.

    Parameters: ~
        {result}  (LoogleResult)  the result to template out

    Returns: ~
        (string[])  a list-like table containing a Lean file template


==============================================================================
satellite.nvim integration                                      *lean.satellite*

 A satellite.nvim progress handler.

 See https://github.com/lewis6991/satellite.nvim/blob/main/HANDLERS.md

==============================================================================
LSP                                                                   *lean.lsp*

 Low-level interaction with the Lean language server.

lsp.enable()                                                        *lsp.enable*


lsp.client_for({bufnr})                                         *lsp.client_for*
     Find the vim.lsp.Client attached to the given buffer.

    Parameters: ~
        {bufnr}  (number)

    Returns: ~
        (vim.lsp.Client)


lsp.plain_goal({params}, {bufnr})                               *lsp.plain_goal*

    Parameters: ~
        {params}  (lsp.TextDocumentPositionParams)
        {bufnr}   (number)

    Returns: ~
        (any)  error
        (any)  plain_goal


lsp.plain_term_goal({params}, {bufnr})                     *lsp.plain_term_goal*

    Parameters: ~
        {params}  (lsp.TextDocumentPositionParams)
        {bufnr}   (number)

    Returns: ~
        (any)  error
        (any)  plain_term_goal


lsp.handlers.file_progress_handler()        *lsp.handlers.file_progress_handler*


lsp.handlers.diagnostics_handler()            *lsp.handlers.diagnostics_handler*


lsp.restart_file({bufnr?})                                    *lsp.restart_file*
    Restart the Lean server for an open Lean 4 file.
    See e.g. https://github.com/leanprover/lean4/blob/master/src/Lean/Server/README.md#recompilation-of-opened-files

    Parameters: ~
        {bufnr?}  (number)


==============================================================================
Standard error buffers                                             *lean.stderr*

 Support for propagating low-level LSP messages emitted on standard error.

stderr.show({message})                                             *stderr.show*
    Show stderr output in a separate stderr buffer.

    Parameters: ~
        {message}  (string)  @a (possibly multi-line) string from stderr


stderr.enable()                                                  *stderr.enable*
     Enable teeing stderr output somewhere (to a second visible buffer by default).


==============================================================================
Client-side sorrying                                                *lean.sorry*

 Support for sorrying multiple goals.

 You should generally prefer to use code actions for this functionality, but this module
 is maintained for a subset of users who prefer its behavior over the current code action
 behavior.

sorry.fill()                                                        *sorry.fill*
     Fill the current cursor position with `sorry`s to discharge all goals.


vim:tw=78:ts=8:noet:ft=help:norl:
