==============================================================================
Table of Contents                                                         *lean*

Introduction ······················································· |lean.init|
Commands ······················································· |lean.commands|
(Unicode) Abbreviation Expansion ·························· |lean.abbreviations|
The Infoview ··················································· |lean.infoview|
Standard error buffers ··········································· |lean.stderr|
LSP ································································· |lean.lsp|

==============================================================================
Introduction                                                         *lean.init*

 lean.nvim provides first-class Neovim support for the Lean interactive
 theorem prover, developed by Leonardo de Moura and the Lean FRO.

 To find out more, see https://github.com/Julian/lean.nvim.

                                                                     *lean.nvim*
lean.setup({opts})                                                  *lean.setup*
    Setup function to be run in your init.lua.

    Parameters: ~
        {opts}  (lean.Config)  Configuration options


lean.plugin_version()                                      *lean.plugin_version*
    Try to find what version of `lean.nvim` this is.

    Assumes your `lean.nvim` comes from a `git` repository.

    Returns: ~
        (string|nil)  version


lean.use_suggested_mappings({bufnr?})              *lean.use_suggested_mappings*
    Enable mappings for a given buffer

    Parameters: ~
        {bufnr?}  (number)  the bufnr to enable mappings in, defaulting to 0


lean.current_search_paths()                          *lean.current_search_paths*
    Return the current Lean search path.

    Includes both the Lean core libraries as well as project-specific
    directories.

    Returns: ~
        (string[])  the current Lean search path


==============================================================================
Commands                                                         *lean.commands*

 (Neovim) commands added by lean.nvim for interacting with Lean.

commands.show_goal()                                        *commands.show_goal*


commands.show_term_goal()                              *commands.show_term_goal*


commands.show_line_diagnostics()                *commands.show_line_diagnostics*


==============================================================================
(Unicode) Abbreviation Expansion                            *lean.abbreviations*

 Support for abbreviations (unicode character replacement).

abbreviations.load()                                        *abbreviations.load*
    Load the Lean abbreviations as a Lua table.
    @return { [string]: string } abbreviations


abbreviations.reverse_lookup()                    *abbreviations.reverse_lookup*
    Retrieve the table of abbreviations that would produce the given symbol.

    Allows for trailing junk. E.g. `λean` will produce information about `λ`.

    The result is a table keyed by the length of the prefix match, and
    whose value is sorted such that shorter abbreviation suggestions are
    first.


abbreviations.show_reverse_lookup()          *abbreviations.show_reverse_lookup*
    Show a preview window with the reverse-lookup of the current character.


abbreviations.convert()                                  *abbreviations.convert*


abbreviations.enable()                                    *abbreviations.enable*


==============================================================================
The Infoview                                                     *lean.infoview*

 Infoview-specific interaction for customizing or controlling the display of
 Lean's interactive goal state.

InfoviewViewOptions                                        *InfoviewViewOptions*

    Fields: ~
        {show_types}               (boolean)  show type hypotheses
        {show_instances}           (boolean)  show instance hypotheses
        {show_hidden_assumptions}  (boolean)  show hypothesis names which are inaccessible
        {show_let_values}          (boolean)  show let-value bodies
        {show_term_goals}          (boolean)  show expected types?
        {reverse}                  (boolean)  order hypotheses bottom-to-top


Pin                                                                        *Pin*
    An individual pin.

    Fields: ~
        {id}  (string)  a label to identify the pin


Info                                                                      *Info*
    An individual info.

    Fields: ~
        {pin}   (Pin)
        {pins}  (Pin[])


Infoview                                                              *Infoview*
    A "view" on an info (i.e. window).

    Fields: ~
        {info}    (Info)
        {window}  (Window)


InfoviewNewArgs                                                *InfoviewNewArgs*

    Fields: ~
        {width?}        (integer)
        {height?}       (integer)
        {orientation?}  ()


FilterSelection                                                *FilterSelection*

    Fields: ~
        {description}  (string)
        {option}       (string)


infoview.close_all()                                        *infoview.close_all*
    Close all open infoviews (across all tabs).


infoview.__update_pin_by_uri({uri})               *infoview.__update_pin_by_uri*
    Update pins corresponding to the given URI.

    Parameters: ~
        {uri}  (string)


infoview.__update_pin_positions()              *infoview.__update_pin_positions*
    on_lines callback to update pins position according to the given textDocument/didChange parameters.


infoview.enable({opts})                                        *infoview.enable*
    Enable and open the infoview across all Lean buffers.

    Parameters: ~
        {opts}  (lean.infoview.Config)


infoview.set_autoopen()                                  *infoview.set_autoopen*
    Set whether a new infoview is automatically opened when entering Lean buffers.


infoview.set_autopause()                                *infoview.set_autopause*
    Set whether a new pin is automatically paused.


infoview.get_current_infoview()                  *infoview.get_current_infoview*
    Get the infoview corresponding to the current window.

    Returns: ~
        (Infoview)


infoview.open()                                                  *infoview.open*
    Open the current infoview (or ensure it is already open).


infoview.close()                                                *infoview.close*
    Close the current infoview (or ensure it is already closed).


infoview.toggle()                                              *infoview.toggle*
    Toggle whether the current infoview is opened or closed.


infoview.pin_toggle_pause()                          *infoview.pin_toggle_pause*
    Toggle whether the current pin receives updates.


infoview.add_pin()                                            *infoview.add_pin*
    Add a pin to the current cursor location.


infoview.set_diff_pin()                                  *infoview.set_diff_pin*
    Set the location for a diff pin to the current cursor location.


infoview.clear_pins()                                      *infoview.clear_pins*
    Clear any pins in the current infoview.


infoview.clear_diff_pin()                              *infoview.clear_diff_pin*
    Clear a diff pin in the current infoview.


infoview.toggle_auto_diff_pin()                  *infoview.toggle_auto_diff_pin*
    Toggle whether "auto-diff" mode is active for the current infoview.


infoview.enable_widgets()                              *infoview.enable_widgets*
    Enable widgets in the current infoview.


infoview.disable_widgets()                            *infoview.disable_widgets*
    Disable widgets in the current infoview.


infoview.go_to()                                                *infoview.go_to*
    Move the cursor to the infoview window.

    -If the infoview is not open, it will be opened.


infoview.reposition()                                      *infoview.reposition*
    Move the current infoview to the appropriate spot based on the
    current screen dimensions.
    Does nothing if there are more than 2 open windows.


infoview.select_view_options()                    *infoview.select_view_options*
    Interactively set some view options for the infoview.

    Does not persist the selected options; if you wish to permanently affect
    which hypotheses are shown, set them in your lean.nvim configuration.


goals.at({params}, {sess})                                            *goals.at*
    Return the interactive goals at the given position, caching them for access.

    Parameters: ~
        {params}  (lsp.TextDocumentPositionParams)
        {sess}    (Subsession)                      @return InteractiveGoal[]? goals
                                                    @return LspError? err


==============================================================================
Standard error buffers                                             *lean.stderr*

 Support for propagating low-level LSP messages emitted on standard error.

stderr.show({message})                                             *stderr.show*
    Show stderr output in a separate stderr buffer.

    Parameters: ~
        {message}  (string)  a (possibly multi-line) string from stderr


stderr.enable()                                                  *stderr.enable*
    Enable teeing stderr output somewhere (to a second visible buffer by default).


==============================================================================
LSP                                                                   *lean.lsp*

 Low-level interaction with the Lean language server.

                                                        *LeanClientCapabilities*
LeanClientCapabilities : lsp.ClientCapabilities

    Fields: ~
        {silentDiagnosticSupport?}  (boolean)  Whether the client supports `DiagnosticWith.isSilent = true`.


LeanClientConfig : vim.lsp.ClientConfig                       *LeanClientConfig*

    Fields: ~
        {lean?}  (LeanClientCapabilities)


lsp.client_for({bufnr?})                                        *lsp.client_for*
    Find the `vim.lsp.Client` attached to the given buffer.

    Parameters: ~
        {bufnr?}  (number)  @return vim.lsp.Client?


LeanDiagnosticTag                                            *LeanDiagnosticTag*
    Custom diagnostic tags provided by the language server.
    We use a separate diagnostic field for this to avoid confusing LSP clients with our custom tags.

    Values: ~
        unsolvedGoals      Diagnostics representing an "unsolved goals" error.
                           Corresponds to `MessageData.tagged `Tactic.unsolvedGoals ..`.
        goalsAccomplished  Diagnostics representing a "goals accomplished" silent message.
                           Corresponds to `MessageData.tagged `goalsAccomplished ..`.


DiagnosticWith                                                  *DiagnosticWith*
    Represents a diagnostic, such as a compiler error or warning.
    Diagnostic objects are only valid in the scope of a resource.

    LSP accepts a `Diagnostic := DiagnosticWith String`.
    The infoview also accepts `InteractiveDiagnostic := DiagnosticWith (TaggedText MsgEmbed)`.
    [reference](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnostic)


DiagnosticRelatedInformation                      *DiagnosticRelatedInformation*
                     `textDocument/publishDiagnostics` notification and
                     `textDocument/codeAction` request.
    Represents a related message and source code location for a diagnostic.
    This should be used to point to code locations that cause or are related to
    a diagnostics, e.g when duplicating a symbol in a scope.

    Fields: ~
        {location}  (lsp.Location)
        {message}   (string)


LeanFileProgressParams                                  *LeanFileProgressParams*

    Fields: ~
        {textDocument}  (lsp.VersionedTextDocumentIdentifier)
        {processing}    (LeanFileProgressProcessingInfo[])


                                                  *LeanPublishDiagnosticsParams*
LeanPublishDiagnosticsParams : lsp.PublishDiagnosticsParams

    Fields: ~
        {diagnostics}  (DiagnosticWith)


lsp.range_of()                                                    *lsp.range_of*

    Returns: ~
        (lsp.Range)  range


lsp.goals_accomplished_at({params})                  *lsp.goals_accomplished_at*
    Is the given line within a range of a goals accomplished marker?

    Parameters: ~
        {params}  (lsp.TextDocumentPositionParams)  the document position in question
                                                    @return boolean? accomplished whether there's a marker at the cursor, or nil if the buffer isn't loaded


lsp.is_unsolved_goals_diagnostic()            *lsp.is_unsolved_goals_diagnostic*

    Returns: ~
        (boolean)


lsp.is_goals_accomplished_diagnostic()    *lsp.is_goals_accomplished_diagnostic*

    Returns: ~
        (boolean)


lsp.enable({opts})                                                  *lsp.enable*

    Parameters: ~
        {opts}  (LeanClientConfig)


lsp.restart_file({bufnr?})                                    *lsp.restart_file*
    Restart the Lean server for an open Lean 4 file.
    See e.g. https://github.com/leanprover/lean4/blob/master/src/Lean/Server/README.md#recompilation-of-opened-files

    Parameters: ~
        {bufnr?}  (number)


vim:tw=78:ts=8:noet:ft=help:norl:
